if(typeof module!="undefined"&&typeof exports!="undefined"&&module.exports===exports){var autobahn=require("autobahn");module.exports="vxWamp"}(function(){"use strict";function n(){var n,t;return this.init=function(t){n=t||{}},t=this.interceptors=[],this.$get=["$rootScope","$q","$log","$injector",function(i,r,u,f){function h(t){return n.disable_digest&&n.disable_digest===!0?t:function(){var n=t.apply(this,arguments);return i.$applyAsync(),n}}var e,l=r.defer(),v=l.promise,s=n.prefix||"$wamp",y=function(n,t,u){var f=r.defer();return i.$broadcast(s+".onchallenge",{promise:f,session:n,method:t,extra:u}),f.promise},p={onchallenge:h(y),use_deferred:r.defer},c,a,o;return n=angular.extend(p,n),c=[],angular.forEach(t,function(n){c.unshift(angular.isString(n)?f.get(n):f.invoke(n))}),e=new autobahn.Connection(n),e.onopen=h(function(n,t){u.debug("Congrats!  You're connected to the WAMP server!");i.$broadcast(s+".open",{session:n,details:t});l.resolve()}),e.onclose=h(function(n,t){var r,f,o;u.debug("Connection Closed: ",n,t);for(r in e.session._call_reqs)e.session._call_reqs.hasOwnProperty(r)&&(f=new Error("Connection Closed"),o=e.session._call_reqs[r],o[0].reject(f));i.$broadcast(s+".close",{reason:n,details:t})}),a=function(n,t,u,f){var o={},l,c,a=r.defer();return t=h(t),c=function(){var i=e.session.subscribe(n,t,u).then(function(n){return o.hasOwnProperty("id")&&delete o.id,o=angular.extend(n,o),a.resolve(o),n});f&&f(i)},e.isOpen&&c(),l=i.$on(s+".open",c),o.promise=a.promise,o.unsubscribe=function(){return l(),e.session.unsubscribe(o)},o.promise},o=function(n,t,i){var l=function(i){return{result:i,type:n,args:t}},a=function(i){return u.error(s+" error",{type:n,arguments:t,error:i}),r.reject({error:i,type:n,args:t})},e=v.then(function(){return i()}),f=[l,a],o,h;for(angular.forEach(c,function(t){(t[n+"Response"]||t[n+"ResponseError"])&&f.push(t[n+"Response"],t[n+"ResponseError"])}),f.push(function(n){return n.result},function(n){return r.reject(n.error)});f.length;)o=f.shift(),h=f.shift(),e=e.then(o,h);return e},{connection:e,open:function(){n.authmethods&&n.authmethods.indexOf("wampcra")!==-1&&!n.authid?u.debug("You're using WAMP CRA.  The authid must be set on $wamp before the connection can be opened, ie: $wamp.setAuthId('john.doe')"):e.open()},setClientId:function(t){function i(n,t){return t?n+"?cid="+encodeURIComponent(t):n}angular.forEach(n.transports,function(n){n.url=i(n.url,t)})},setAuthId:function(t,i){n.authid=t;i&&e.open()},close:function(){e.close()},subscribe:function(n,t,i,r){return o("subscribe",arguments,function(){return a(n,t,i,r)})},subscribeOnScope:function(n,t,i){return this.subscribe(t,i).then(function(t){n.$on("$destroy",function(){return t.unsubscribe()})})},unsubscribe:function(n){return o("unsubscribe",arguments,function(){return n.unsubscribe()})},publish:function(n,t,i,r){return o("publish",arguments,function(){return e.session.publish(n,t,i,r)})},register:function(n,t,i){return t=h(t),o("register",arguments,function(){return e.session.register(n,t,i)})},unregister:function(n){return o("unregister",arguments,function(){return n.unregister()})},call:function(n,t,i,r){return o("call",arguments,function(){return e.session.call(n,t,i,r)})}}}],this}var t=angular.module("vxWamp",[]).provider("$wamp",n)})();